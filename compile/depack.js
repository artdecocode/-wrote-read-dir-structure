#!/usr/bin/env node
             
const fs = require('fs');
const path = require('path');
const os = require('os');             const {lstat:l,readdir:p}=fs;const q=(a,b=0,e=!1)=>{if(0===b&&!e)return a;a=a.split("\n",e?b+1:void 0);return e?a[a.length-1]:a.slice(b).join("\n")},r=(a,b=!1)=>q(a,2+(b?1:0)),t=a=>{({callee:{caller:a}}=a);return a};const {homedir:u}=os;const v=/\s+at.*(?:\(|\s)(.*)\)?/,w=/^(?:(?:(?:node|(?:internal\/[\w/]*|.*node_modules\/(?:IGNORED_MODULES)\/.*)?\w+)\.js:\d+:\d+)|native)/,x=u(),y=a=>{const {pretty:b=!1,ignoredModules:e=["pirates"]}={},f=e.join("|"),d=new RegExp(w.source.replace("IGNORED_MODULES",f));return a.replace(/\\/g,"/").split("\n").filter(c=>{c=c.match(v);if(null===c||!c[1])return!0;c=c[1];return c.includes(".app/Contents/Resources/electron.asar")||c.includes(".app/Contents/Resources/default_app.asar")?!1:!d.test(c)}).filter(c=>
c.trim()).map(c=>b?c.replace(v,(g,h)=>g.replace(h,h.replace(x,"~"))):c).join("\n")};function z(a,b,e=!1){return function(f){var d=t(arguments),{stack:c}=Error();const g=q(c,2,!0),h=(c=f instanceof Error)?f.message:f;d=[`Error: ${h}`,...null!==d&&a===d||e?[b]:[g,b]].join("\n");d=y(d);return Object.assign(c?f:Error(),{message:h,stack:d})}};function A(a){var {stack:b}=Error();const e=t(arguments);b=r(b,a);return z(e,b,a)};function B(a,b){if(b>a-2)throw Error("Function does not accept that many arguments.");}async function C(a,b,e){const f=A(!0);if("function"!==typeof a)throw Error("Function must be passed.");const {length:d}=a;if(!d)throw Error("Function does not accept any arguments.");return await new Promise((c,g)=>{const h=(k,m)=>k?(k=f(k),g(k)):c(e||m);let n=[h];Array.isArray(b)?(b.forEach((k,m)=>{B(d,m)}),n=[...b,h]):1<Array.from(arguments).length&&(B(d,0),n=[b,h]);a(...n)})};const {join:D,relative:E}=path;async function F(a,b){b=b.map(async e=>{const f=D(a,e);return{lstat:await C(l,f),path:f,relativePath:e}});return await Promise.all(b)}const G=a=>a.lstat.isDirectory(),H=a=>!a.lstat.isDirectory();
async function I(a,b={}){if(!a)throw Error("Please specify a path to the directory");const {ignore:e=[]}=b;if(!(await C(l,a)).isDirectory())throw b=Error("Path is not a directory"),b.code="ENOTDIR",b;b=await C(p,a);var f=await F(a,b);b=f.filter(G);f=f.filter(H).reduce((d,c)=>{var g=c.lstat.isDirectory()?"Directory":c.lstat.isFile()?"File":c.lstat.isSymbolicLink()?"SymbolicLink":void 0;return{...d,[c.relativePath]:{type:g}}},{});b=await b.reduce(async(d,{path:c,relativePath:g})=>{const h=E(a,c);if(e.includes(h))return d;
d=await d;c=await I(c);return{...d,[g]:c}},{});return{content:{...f,...b},type:"Directory"}}const J=(a,b)=>{let e=[],f=[];Object.keys(a).forEach(c=>{const {type:g}=a[c];"File"==g?e.push(D(b,c)):"Directory"==g&&f.push(c)});const d=f.reduce((c,g)=>{const {content:h}=a[g];g=J(h,D(b,g));return[...c,...g]},[]);return[...e,...d]};module.exports={_readDirStructure:I,_getFiles:J};

//# sourceMappingURL=depack.js.map